flowchart TB
User([👤 User]) --> Auth[🔒 Authentication & Authorization]
Auth --> InputQuery[💬 User Query]

    subgraph Context["📚 Context Construction"]
        InputQuery --> RAG[🔍 RAG Pipeline]
        DB[(🗄️ Database)] --> RAG
        VectorDB[(📂 Vector DB)] --> RAG
        WebSearch[🌐 Web Search] --> RAG
    end

    RAG --> InputGuard[🛡️ Input Guardrails]
    InputGuard --> Cache{⚡ Cache}

    Cache -->|Cache Hit| Response[✅ Response]
    Cache -->|Cache Miss| Router[🔀 Model Router]

    Router --> ModelAPI1[🤖 Model API 1]
    Router --> ModelAPI2[🤖 Model API 2]

    ModelAPI1 --> Scoring1[📊 Scoring]
    ModelAPI2 --> Scoring2[📊 Scoring]

    Scoring1 --> OutputGuard[🛡️ Output Guardrails]
    Scoring2 --> OutputGuard

    OutputGuard --> Response

    Response --> Agents{🤝 Agents}
    Agents -->|📧 Email| EmailAction[📩 Send Email]
    Agents -->|🔔 Notify| NotifyAction[📢 Notify]
    Agents -->|📦 Update| UpdateAction[🔄 Update Order]

    Monitor[📈 Observability & Monitoring] -.-> Context
    Monitor -.-> Router
    Monitor -.-> Response

    classDef security fill:#ff4f4f,stroke:#333,stroke-width:2px,color:#fff
    classDef monitoring fill:#9370db,stroke:#333,stroke-width:2px,color:#fff
    classDef storage fill:#f4a261,stroke:#333,stroke-width:2px,color:#fff
    classDef model fill:#2ca02c,stroke:#333,stroke-width:2px,color:#fff
    classDef process fill:#1f77b4,stroke:#fff,stroke-width:2px,color:#fff
    classDef cache fill:#f9c74f,stroke:#333,stroke-width:2px,color:#000

    class Auth,InputGuard,OutputGuard security
    class Monitor monitoring
    class DB,VectorDB,WebSearch storage
    class ModelAPI1,ModelAPI2 model
    class Router,Scoring1,Scoring2,Response,Agents process
    class Cache cache
